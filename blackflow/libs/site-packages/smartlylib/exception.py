'''
Created on Feb 10, 2014

@author: johnny
'''
import sys, traceback, inspect

class ChainedException(Exception): 
    '''
    Extension of Exception that provides chaining possibilities
    '''    
    def __init__(self, message):
        super(ChainedException, self).__init__(message)
        self.cause = None
        
        ei = sys.exc_info()
        if ei[0] != None:
            self.cause = (ei[0], ei[1], traceback.extract_tb(ei[2], 5))
            try:
                # Get the next cause in chain
                nextCause = ei[1].cause
                while nextCause != None:
                    if ChainedException._compare(self.cause[2], nextCause[2]):
                        # We found a match. Let's use that in stead
                        self.cause = nextCause
                        break
                    nextCause = nextCause[1].cause
            
            except AttributeError:
                # NO-OP: Atrribute errors are caused by non-chained cause exceptions, and should be ignored
                pass
                    
            except Exception: 
                traceback.print_exc()

            
    @staticmethod
    def _compare(tr1, tr2):
        if tr1[0][1] != tr2[0][1]: return False
        if tr1[0][2] != tr2[0][2]: return False
        if tr1[0][0] != tr2[0][0]: return False 
        return True
         
         
    def __str__(self):
        resultStr = super(ChainedException, self).__str__()
        if self.cause is not None:
            traceStr = ''.join(traceback.format_list(self.cause[2])).strip()
            excptionStr = ''.join(traceback.format_exception_only(self.cause[0], self.cause[1])).strip()
            resultStr += "\n==> Cause Exception Traceback:\n%s\n%s" % (traceStr, excptionStr)

        return resultStr
