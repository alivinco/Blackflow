'''
Created on Jul 24, 2014

@author: johnny
'''

import traceback

def dumphex(data, offset = 0, length = -1):
    if not isinstance(data, bytearray):
        data = bytearray(data)
    
    if length == 0: return ""
    if length < 0:
        dataLen = len(data)
    else:
        dataLen = min(len(data) - offset, length)
        
    rowData = ''
    for row in range(0, dataLen, 16):
        rowData += ('%06X' % row) + ":"
        
        end = min(dataLen - row, 16)
        for col in range(0, 16):
            if col % 8 == 0:
                rowData += " "
            if col < end:
                val = ('%02X' % data[offset + row + col])
            else:
                val = "  "
            rowData += " " + val
        
        rowData += "  "
        
        for col in range(0, end):
            val = data[row + col]
            if val >= 32 and val < 127:
                rowData += chr(val)
            else:
                rowData += "."

        rowData += "\n"

    return rowData


def stack(limit = None, offset = 1):
    '''
    Creates a Stack Trace string and returns it. This is a convenience for extracting
    stacktraces without exceptions, which is cumbersome to do with the traceback module.
    
    @param limit: Limit to number of entries to include in stack trace. None means entire stack.
    @param offset: Offset to start outputting from. Default 1, to avoid having this method call included.  
    '''
    if limit is not None: limit += offset
    stackString = ""
    traceList = traceback.format_stack(None, limit)
    for traceItem in traceList[0:0-offset]: stackString += traceItem
    return stackString.rstrip()
    