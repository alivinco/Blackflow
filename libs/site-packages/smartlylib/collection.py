'''
Created on Aug 11, 2014

@author: johnny
'''
from copy import deepcopy


class TwoWayDict(dict):
    '''
    Dictionary implementation that references in both directions. 
    Reverse lookup is available through the reverse property of the object 
    '''
    
    def __init__(self, param):
        self.reverse = dict()
        for key in param:
            self.__setitem__(key, param[key])
    
    def __setitem__(self, key, value):
        super(TwoWayDict, self).__setitem__(key, value)
        self.reverse.__setitem__(value, key)
    
    def __delitem__(self, key):
        value = self[key]
        super(TwoWayDict, self).__delitem__(key)
        self.reverse.__delitem__(value)
            
        
def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    #entries = dict((key, value) for key, value in enums.iteritems())
    entries = dict(enums)
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['entries'] = entries
    enums['reverse'] = reverse
    return type('Enum', (), enums)

def dict_merge(a, b):
    '''
    Recursively merges dict's. not just simple a['key'] = b['key'], if
    both a and b has a key whose value is a dict, then dict_merge is called
    on both values and the result stored in the returned dictionary.
    '''
    if isinstance(b, dict):
        result = deepcopy(a)
        for k, v in b.iteritems():
            if result is None:
                return None
            if k in result and isinstance(result[k], dict):
                result[k] = dict_merge(result[k], v)
            else:
                result[k] = deepcopy(v)
        return dict(result)
    else:
        return a
